---
# currently just a thin wrapper around real_config to add dynamic parameters
version: '2.1'
setup: true

orbs:
  continuation: circleci/continuation@1.0.0
  gh: circleci/github-cli@2.0

parameters:
  workspace_path:
    type: string
    default: '/tmp/workspace'
  params_basename:
    type: string
    default: params.json

all-filters: &all-filters
  branches:
    only:
      - /.*/
  tags:
    only:
      - /.*/

workflows:
  determined_ai:
    jobs:
      - set_up_param_file:
          filters: *all-filters
          context:
            - github-read
      - exec_config:
          filters: *all-filters
          requires:
            - set_up_param_file
      - test-go:
          filters: *all-filters

jobs:
  exec_config:
    executor: continuation/default
    steps:
      - checkout
      - attach_workspace:
          at: '<<pipeline.parameters.workspace_path>>'
      - continuation/continue:
          configuration_path: .circleci/real_config.yml
          parameters: '<<pipeline.parameters.workspace_path>>/<<pipeline.parameters.params_basename>>'

  set_up_param_file:
    docker:
      - image: cimg/base:stable
    steps:
      - gh/install
      - checkout

      # this must be first; default to an empty params list
      - run:
          name: clear param file
          command: echo '{}' > "<<pipeline.parameters.params_basename>>"

      # add whatever parameters are needed.
      # repeating keys is ok, since jq will either add or overwrite
      - run:
          name: Check for scheduled nightly run
          command: |
            if [[ "scheduled_pipeline" == "<<pipeline.trigger_source>>"
               && "nightly_tests" == "<<pipeline.schedule.name>>"
            ]]
            then
              # add the parameter(s) to the temp file
              jq '. += {"do_nightly_tests": true}' < "<<pipeline.parameters.params_basename>>" > tmpfile
              mv -v tmpfile "<<pipeline.parameters.params_basename>>"
            fi
      - run:
          name: Check for labeled nightly run
          command: |
            if gh pr view --json labels --jq ".labels[].name" \
               | grep -w "ci-run-nightly"
            then
              jq '. += {"do_nightly_tests": true}' < "<<pipeline.parameters.params_basename>>" > tmpfile
              mv -v tmpfile "<<pipeline.parameters.params_basename>>"
            fi

      # this must be last; persist the file to the workspace
      - persist_to_workspace:
          root: .
          paths:
            - '<<pipeline.parameters.params_basename>>'
  test-go:
      # https://determined-ai.slack.com/archives/C03H5KZPU30/p1667241463073989
      # - test-intg-downstream
      - test-intg-master:
          context: storage-unit-tests
      - test-intg-agent

  test-intg-master:
    machine:
      image: '<<pipeline.parameters.machine-image>>'
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: .
      - reinstall-go
      - setup-go-intg-deps
      - run: make -C master test-intg
      - store_test_results:
          path: master/test-intg.junit.xml
      - persist_to_workspace:
          root: .
          paths:
            - master/coverage.out

  test-intg-agent:
    machine:
      image: <<pipeline.parameters.machine-image>>
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: .
      - reinstall-go
      - setup-go-intg-deps
      - run: make -C agent test-intg
      - store_test_results:
          path: agent/test-intg.junit.xml
      - persist_to_workspace:
          root: .
          paths:
            - agent/coverage.out
  reinstall-go:
    steps:
      - run: sudo rm -rf /usr/local/go # Remove system go.
      - run: tools/scripts/retry.sh curl --retry-connrefused --retry 10 https://dl.google.com/go/go1.21.0.linux-amd64.tar.gz -o /tmp/go.linux-amd64.tar.gz
      - run: sudo tar -C /usr/local -xzf /tmp/go.linux-amd64.tar.gz
      - run: echo 'export PATH=$PATH:$HOME/go/bin' >> $BASH_ENV
  setup-go-intg-deps:
    steps:
      - install-protoc # Install newer version of protoc into $HOME/.local/bin, since default is proto2.
      - run: PATH=$HOME/.local/bin:$PATH make -C proto get-deps
      - run: PATH=$HOME/.local/bin:$PATH make -C proto build
      - run: make -C master get-deps
      - run: make -C agent get-deps
      - install-devcluster
      - start-devcluster:
          target-stage: elastic
          devcluster-config: elastic-base.devcluster.yaml
  
  install-protoc:
    steps:
      - run: curl --retry-connrefused --retry 10 -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protoc-3.20.3-linux-x86_64.zip
      - run: unzip -o /tmp/protoc.zip -d $HOME/.local

  install-devcluster:
    steps:
      - run: pip install git+https://github.com/determined-ai/devcluster.git@v1.1.0#egg=devcluster
      - run:
          command: |
            if ! [ -x "$(command -v socat)" ]; then
              apt update && apt install -y socat
            fi
  
  start-devcluster:
    parameters:
      devcluster-config:
        type: string
        default: double.devcluster.yaml
      target-stage:
        type: string
        default: agent1
    steps:
      - run:
          command: devcluster --oneshot -c .circleci/devcluster/<<parameters.devcluster-config>> --target-stage <<parameters.target-stage>>
          background: true
